package in.gaurav.serviceImpl;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.stereotype.Service;

import com.lowagie.text.Document;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfTable;
import com.lowagie.text.pdf.PdfWriter;

import in.gaurav.entity.CitizenPlan;
import in.gaurav.repository.CitizenPlanRepository;
import in.gaurav.request.SearchRequest;
import in.gaurav.service.ReportService;
import in.gaurav.utils.ExcelGenerator;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletResponse;

@Service
public class ReportServiceImpl implements ReportService{

	@Autowired
	private CitizenPlanRepository citizenPlanRepository;
	
	@Autowired
	private ExcelGenerator excelGenerator;
	
	@Override
	public List<String> getPlanNames() {
		return citizenPlanRepository.getPlanNames();
	}

	@Override
	public List<String> getPlanStatus() {
		return citizenPlanRepository.getPlanStatus();
	}

	@Override
	public List<CitizenPlan> search(SearchRequest request) {
		CitizenPlan entity=new CitizenPlan();
		if(null!=request.getPlanName() && !"".equals(request.getPlanName())) {
			entity.setPlanName(request.getPlanName());
		}
		if(null!=request.getPlanStatus() && !"".equals(request.getPlanStatus())) {
			entity.setPlanStatus(request.getPlanStatus());
		}
		if(null!=request.getGender() && !"".equals(request.getGender())) {
			entity.setGender(request.getGender());
		}
		if(null!=request.getPlanStartDate() && !"".equals(request.getPlanStartDate())) {
			String date = request.getPlanStartDate();
			 DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
			  //convert String to LocalDate
			  LocalDate localDate = LocalDate.parse(date, formatter);
			entity.setPlanStartDate(localDate);
		}
		if(null!=request.getPlanEndDate() && !"".equals(request.getPlanEndDate())) {
			String date = request.getPlanEndDate();
			 DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
			  //convert String to LocalDate
			  LocalDate localDate = LocalDate.parse(date, formatter);
			entity.setPlanEndDate(localDate);
		}
		
		return citizenPlanRepository.findAll(Example.of(entity));
	}

	@Override
	public boolean exportExcel(HttpServletResponse response) throws Exception {
		List<CitizenPlan> records = citizenPlanRepository.findAll();
		excelGenerator.generate(response, records);
		return false;
	}

	@Override
	public boolean exportPdf(HttpServletResponse response) throws Exception {
		Document document=new Document(PageSize.A4);
		PdfWriter.getInstance(document, response.getOutputStream());
		document.open();
		
		Paragraph p=new Paragraph("Citizen Plans Info");
		document.add(p);
		PdfPTable table=new PdfPTable(6);
		table.addCell("Citizen Id");
		table.addCell("Citizen Name");
		table.addCell("Plan Name");
		table.addCell("Plan Status");
		table.addCell("Plan Start Date");
		table.addCell("Plan End Date");
		List<CitizenPlan> plans = citizenPlanRepository.findAll();
		for (CitizenPlan citizenPlan : plans) {
			table.addCell(String.valueOf(citizenPlan.getCitizenId()));
			table.addCell(citizenPlan.getCitizenName());
			table.addCell(citizenPlan.getPlanName());
			table.addCell(citizenPlan.getPlanStatus());
			table.addCell(citizenPlan.getPlanStartDate()+"");
			table.addCell(citizenPlan.getPlanEndDate()+"");
		}
		document.add(table);
		document.close();
		
		return false;
	}

	
}

